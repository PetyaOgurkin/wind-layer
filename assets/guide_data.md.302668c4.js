import{_ as e,v as s,b as a,R as n}from"./chunks/framework.6acaff8e.js";const A=JSON.parse('{"title":"数据说明","description":"","frontmatter":{"title":"数据说明","order":1},"headers":[],"relativePath":"guide/data.md","filePath":"guide/data.md","lastUpdated":1686575656000}'),o={name:"guide/data.md"},c=n(`<h2 id="关于数据来源" tabindex="-1">关于数据来源 <a class="header-anchor" href="#关于数据来源">¶</a></h2><p>对应数据来源可以是gfs或者ecmwf，无论数据来源是哪个地方，最终此插件目前只支持<code>json</code>数据格式输入。</p><p>关于如何将数据文件转换为 <code>json</code> ，你可以查阅 <code>[grib2json](https://github.com/cambecc/grib2json)</code>, 或者 <a href="https://software.ecmwf.int/wiki/display/GRIB/Releases" target="_blank" rel="noreferrer">ecmwf</a> 的数据处理库，当然，你也可以自行处理格点数据； 本仓库中的<code>node</code> 处理程序主要依赖了 <code>grib2json</code> 的一个jar包；</p><p>另外在解析数据时需要注意数据是否翻转了，默认对于地图展示来说我们知道经度默认从左向右递增，纬度从上向下依次递减（不一定完全正确）， 所以在处理数据时我们需要注意数据的范围和方向，避免展示出错，相关有一个讨论可以在 <a href="https://github.com/sakitam-fdd/wind-layer/issues/44" target="_blank" rel="noreferrer">44</a> 看到。</p><h2 id="数据详解" tabindex="-1">数据详解 <a class="header-anchor" href="#数据详解">¶</a></h2><p>返回 <code>json</code> 数据为一个数组类型，两个元素分别为 U和V对应数据，数据中应该至少包含以下字段：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">dx: Increment in X direction, cannot be negative(x方向增量)</span></span>
<span class="line"><span style="color:#A6ACCD;">dy: Increment in Y direction, cannot be negative（Y方向增量）</span></span>
<span class="line"><span style="color:#A6ACCD;">nx: cols 数据行数</span></span>
<span class="line"><span style="color:#A6ACCD;">ny: rows 数据列数</span></span>
<span class="line"><span style="color:#A6ACCD;"># 以下四个为数据矩形范围</span></span>
<span class="line"><span style="color:#A6ACCD;">lo</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">: xmin </span></span>
<span class="line"><span style="color:#A6ACCD;">lo</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">: xmax</span></span>
<span class="line"><span style="color:#A6ACCD;">la</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">: ymin</span></span>
<span class="line"><span style="color:#A6ACCD;">la</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">: ymax</span></span>
<span class="line"><span style="color:#A6ACCD;"># u/v 主要由以下参数区分</span></span>
<span class="line"><span style="color:#A6ACCD;">parameterCategory: data type</span></span>
<span class="line"><span style="color:#A6ACCD;">parameterNumber: data type</span></span></code></pre></div><p>一般情况下由 <code>grib2json</code> 转出的数据<code>parameterCategory</code>参数为<code>1</code>，当<code>parameterNumber</code> 为 <code>2</code> 时为<code>u</code> 分量， 当<code>parameterNumber</code> 为 <code>3</code> 时为<code>v</code> 分量。</p><p>并且还需要注意的是 <code>dy</code>（纬度）增量 (默认我们采用的数据和格点原始数据方向保持一致，数据从左上到右下) 但是需要注意的是此时 <code>dy</code> 为 -(ymax - ymin) / ny 有些情况下我们格点数据组织形式可能 Y 轴是上下翻转的，此时我们可以配置 <code>options.fieldOptions.flipY = true</code>，来主动翻转数据（默认情况下我们检测到数据配置中的 <code>deltaY &gt; 0</code> 时并且未配置<code>flipY</code>参数项默认去翻转数据）。</p>`,9),p=[c];function t(l,r,d,i,C,y){return s(),a("div",null,p)}const h=e(o,[["render",t]]);export{A as __pageData,h as default};
